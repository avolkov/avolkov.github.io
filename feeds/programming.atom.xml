<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>disparate notes - programming</title><link href="https://avolkov.github.io/" rel="alternate"></link><link href="https://avolkov.github.io/feeds/programming.atom.xml" rel="self"></link><id>https://avolkov.github.io/</id><updated>2018-08-13T00:00:00-04:00</updated><entry><title>Simple threading in Python 3</title><link href="https://avolkov.github.io/simple-threading-in-python-3.html" rel="alternate"></link><published>2018-08-13T00:00:00-04:00</published><updated>2018-08-13T00:00:00-04:00</updated><author><name>Alex Volkov</name></author><id>tag:avolkov.github.io,2018-08-13:/simple-threading-in-python-3.html</id><summary type="html">&lt;p&gt;I've been working in Python 3 on an an embarrassingly parallel task of parsing and importing data into Postgres. Once I've done single-threaded implementation I looked around for parallelizing the program and after a few tries I managed to get everything running in parallel.&lt;/p&gt;
&lt;p&gt;This is a quick note on â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been working in Python 3 on an an embarrassingly parallel task of parsing and importing data into Postgres. Once I've done single-threaded implementation I looked around for parallelizing the program and after a few tries I managed to get everything running in parallel.&lt;/p&gt;
&lt;p&gt;This is a quick note on how to get a thread pool working in Python 3.6&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;concurrent.futures&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;data_source&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Fetch data to be processed in parallel&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Implement fetching data&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Process data without modifying input&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Implement saving data to postgres&lt;/span&gt;


&lt;span class="n"&gt;MAX_THREADS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MAX_THREADS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data_source&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code block above, &lt;strong&gt;data_source&lt;/strong&gt; function is an iterator that generates one &lt;strong&gt;value&lt;/strong&gt; at a time. &lt;strong&gt;pool.submit&lt;/strong&gt; calls &lt;strong&gt;process_data&lt;/strong&gt; with &lt;strong&gt;value&lt;/strong&gt; as a parameter of &lt;strong&gt;process_data&lt;/strong&gt; in parallel until thread pool limited in size by &lt;strong&gt;MAX_THREADS&lt;/strong&gt; is exhausted, then the program waits for a thread to become available and fetches the next value, until &lt;strong&gt;data_sources&lt;/strong&gt; generator is exhausted.&lt;/p&gt;
&lt;p&gt;In this example &lt;strong&gt;pool.submit&lt;/strong&gt; passes single parameter &lt;strong&gt;value&lt;/strong&gt; to &lt;strong&gt;process_data&lt;/strong&gt;, but &lt;strong&gt;pool.submit&lt;/strong&gt; can pass any number of parameters required for the callee function i.e.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pool_submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callee_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callee_param_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callee_param_n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;callee_param_n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I really like this threading implementation because it's really simple, there's no need to write any code to manage threading pool, single- and multi- threaded implementation can live side-by-site if there's ever a need to debug any logic in &lt;em&gt;process_data&lt;/em&gt; function.&lt;/p&gt;
&lt;p&gt;Still this threading library implemented in python, whic is not true threading and multi-threaded code is a subject of Global Interpreter Lock so the CPU-bound tasks will not benefit from this.&lt;/p&gt;
&lt;p&gt;ThreadPoolExecutor documentation -- &lt;a class="reference external" href="https://docs.python.org/3/library/concurrent.futures.html"&gt;https://docs.python.org/3/library/concurrent.futures.html&lt;/a&gt;&lt;/p&gt;
</content><category term="python"></category><category term="multithreading"></category></entry></feed>