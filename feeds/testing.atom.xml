<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>disparate notes - testing</title><link href="https://avolkov.github.io/" rel="alternate"></link><link href="https://avolkov.github.io/feeds/testing.atom.xml" rel="self"></link><id>https://avolkov.github.io/</id><updated>2016-12-17T00:00:00-05:00</updated><entry><title>Testing Python with Mock</title><link href="https://avolkov.github.io/testing-python-with-mock.html" rel="alternate"></link><published>2016-12-17T00:00:00-05:00</published><updated>2016-12-17T00:00:00-05:00</updated><author><name>Alex Volkov</name></author><id>tag:avolkov.github.io,2016-12-17:/testing-python-with-mock.html</id><summary type="html">&lt;p class="first last"&gt;Testing with mocks and less well know mock methods&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="preamble"&gt;
&lt;h2&gt;Preamble&lt;/h2&gt;
&lt;p&gt;In the past few months I've been fortunate enough to write code using TDD. There a brief outline of my experiences using python Mock library help with adding test coverage for the code which is hard to test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lessons-learned-from-using-mock"&gt;
&lt;h2&gt;Lessons learned from using mock&lt;/h2&gt;
&lt;p&gt;Mocking internals of your application is hard, mostly because of dependencies on the other parts of the program, in this case object should be mocked if there is no other choice -- a much better approach is to just create object instances, this is especially true when creating database-backed objects. Integration tests of real database-backed object will verify application logic, as well as database relationships.&lt;/p&gt;
&lt;p&gt;Mocks, however, are perfect when faking third party API responses -- there's no application interdependencies to be aware of, the test suite allows to execute code as is, without relying on third-party services or sending any data out, it codifies third party API responses as they are used by your application -- the latter point is especially helpful when a third party API changes between the releases, and any unexpected errors raised after an upgrade, can be quickly identified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="knowing-where-to-inject-mock-object"&gt;
&lt;h2&gt;Knowing where to inject mock object&lt;/h2&gt;
&lt;p&gt;The most challenging part of mocking an object is to figure out where to inject a mocked object. The object needs to be mocked whenever its imported and used an not whenever it's defined. This makes sense because the purpose of the test is to check particular code path with a mock and not to mock that object everywhere. However,  my initial assumption was to simply copy import statement from a source, which led to a lot of confusion.&lt;/p&gt;
&lt;p&gt;In the following example, of guessing a number between 0 and 10. If the code was saved in a file &lt;strong&gt;main.py&lt;/strong&gt; with import from  &lt;strong&gt;random.randint&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Guessed {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mock setup for this case will have to inject randint mock object into &lt;strong&gt;main&lt;/strong&gt; program and not &lt;strong&gt;rand&lt;/strong&gt; library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main.randint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rnd_mock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;main&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;
    &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rnd_mock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="debugging-objects-that-don-t-cooperate-with-mock"&gt;
&lt;h2&gt;Debugging objects that don't cooperate with mock&lt;/h2&gt;
&lt;p&gt;The second-most challenging thing about mocking objects is timing -- especially the cases where an original instance of the object gets called before mock patch ever has a chance to replace the object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;foo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;

&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo.bar.run&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this particular case, going against pythonic way of importing code, keeping all the imports at the top of the file, is justified as this solves the problem, running import within patch section will do the trick.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo.bar.run&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;foo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
    &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In general there is no easy solution to this kind of problem, but a useful debugging technique would be to put a debug point before &lt;strong&gt;with&lt;/strong&gt; declaration, just inside &lt;strong&gt;with&lt;/strong&gt; declaration, and just before the declaration of the object to be mocked. Tracing the order of calls would give a good clue on what's wrong with the mock setup.&lt;/p&gt;
&lt;p&gt;Most of the time, the problem is cause by the wrong assumption about the order of imports.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mocked-method-call-vs-mocked-property"&gt;
&lt;h2&gt;Mocked method call vs. mocked property&lt;/h2&gt;
&lt;p&gt;There's a difference between calling a mocked property and a method -- it's possible to just assign the value to a property, however for a function needs to be assigned the return value to the property &lt;strong&gt;return_value&lt;/strong&gt; of that mock.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_property&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
     &lt;span class="n"&gt;myobj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="n"&gt;myobj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;myprop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myobj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;myprop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_method&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;myobj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;myobj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myobj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the case of mocking methods calling other methods, return_value can be skipped until the very last method in the chain&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_chained_method&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
     &lt;span class="n"&gt;myobj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="n"&gt;myobj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myobj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_method&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mock-helper-methods"&gt;
&lt;h2&gt;Mock helper methods&lt;/h2&gt;
&lt;p&gt;The following helper methods are useful when examining mocks state of how many times and with which parameters a mock was called.&lt;/p&gt;
&lt;p&gt;See mock documentation for more info -- &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.mock.html"&gt;https://docs.python.org/3/library/unittest.mock.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;method calls&lt;/strong&gt; -- a method for tracking any calls to mock objects as well as calls to their methods and attributes.&lt;/p&gt;
&lt;p&gt;i.e. The object hasn't been called&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mailer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method_calls&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A constructor has been called with a 'Message' object&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;mailer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method_calls&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;pyramid_mailer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7fb9cae06e90&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;call_args&lt;/strong&gt; -- the arguments the mock was last called with. This method will only return arguments from the last call. To get arguments from all calls, use &lt;em&gt;call_args_list&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;call_args_list&lt;/strong&gt; -- list of the calls made to the mock objects in a sequence. Useful for figuring out the order of calls.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;call_count&lt;/strong&gt; -- the number of times mock object was called&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mock_calls&lt;/strong&gt; -- records all calls to the mock object, its methods, magic methods and return value mocks.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="testing"></category><category term="mock"></category></entry><entry><title>Nose2 profiler setup</title><link href="https://avolkov.github.io/nose2-profiler-setup.html" rel="alternate"></link><published>2016-11-17T00:00:00-05:00</published><updated>2016-11-17T00:00:00-05:00</updated><author><name>Alex Volkov</name></author><id>tag:avolkov.github.io,2016-11-17:/nose2-profiler-setup.html</id><summary type="html">&lt;p class="first last"&gt;nose2 profiling configuration&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Nose profiler is one of the plugins that come with nose2 but is turned off by default.&lt;/p&gt;
&lt;p&gt;To enable profiling add the following configuration to &lt;strong&gt;unittest.cfg&lt;/strong&gt; in the root of your project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[unittest]&lt;/span&gt;
&lt;span class="na"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;nose2.plugins.prof&lt;/span&gt;

&lt;span class="k"&gt;[profiler]&lt;/span&gt;
&lt;span class="na"&gt;always-on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;False&lt;/span&gt;
&lt;span class="na"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="na"&gt;restrict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="na"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;cumulative&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To enable profiler during nose2 run, use the following command parameters &lt;tt class="docutils literal"&gt;nose2 &lt;span class="pre"&gt;-P&lt;/span&gt;&lt;/tt&gt; or more useful, redirect stdout and stderror into a file so profiler output can be analyzed &lt;tt class="docutils literal"&gt;nose2 &lt;span class="pre"&gt;-P&lt;/span&gt; &amp;amp;&amp;gt; perf_report.txt&lt;/tt&gt;&lt;/p&gt;
</content><category term="python"></category><category term="testing"></category><category term="nose2"></category><category term="profiling"></category></entry><entry><title>Cricket -- awesome ugly test visualizer</title><link href="https://avolkov.github.io/cricket-awesome-ugly-test-visualizer.html" rel="alternate"></link><published>2016-11-16T00:00:00-05:00</published><updated>2016-11-16T00:00:00-05:00</updated><author><name>Alex Volkov</name></author><id>tag:avolkov.github.io,2016-11-16:/cricket-awesome-ugly-test-visualizer.html</id><summary type="html">&lt;p class="first last"&gt;Cricket, a handy GUI tool for running tests in python&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I've been writing tests for a while and running them with nose2. One of more labor-intensive interactions with nose2 is typing out paths to individual tests. Cricket -- a part of BeeWare suite solves copying-and-pasting test name problem and provides a nice user interface to summarize results from running test suite.&lt;/p&gt;
&lt;div class="section" id="installing-dependencies"&gt;
&lt;h2&gt;Installing dependencies&lt;/h2&gt;
&lt;p&gt;Cricket has a couple of system-level dependencies: IDLE editor and IDLE library and TkInter.&lt;/p&gt;
&lt;p&gt;For Debian,&lt;/p&gt;
&lt;p&gt;Running Cricket under Python 2.7 the following libraries need to be installed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install idle idle-python2.7 python-tk
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running Cricket Python 3.x the dependencies are&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install idle3 idle-python3.5 python-tk
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-cricket"&gt;
&lt;h2&gt;Installing cricket&lt;/h2&gt;
&lt;p&gt;Cricket is installed using pip, you can install it in the existing project, or add it in setup.py as one of the dependencies.&lt;/p&gt;
&lt;p&gt;Cricket pip page -- &lt;a class="reference external" href="https://pypi.python.org/pypi/cricket"&gt;https://pypi.python.org/pypi/cricket&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(cricket-test)$ pip install cricket
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="running-cricket"&gt;
&lt;h2&gt;Running cricket&lt;/h2&gt;
&lt;p&gt;For any python project written with unittest, run &lt;strong&gt;cricket-unittst&lt;/strong&gt; for django projects, run &lt;strong&gt;cricket-django&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="runnig-sample-pyramid-project-with-cricket"&gt;
&lt;h2&gt;Runnig sample pyramid project with cricket&lt;/h2&gt;
&lt;p&gt;Getting started with cricket -- this example of running Pyramid test under Python 3.5&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create Python 3 virtualenv&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkvirtualenv cricket-test --python `which python3`
(cricket-test) $ python -V
Python 3.5.2+
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pull Pyramid source code&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(cricket-test) $ git clone https://github.com/Pylons/pyramid.git
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install Pyramid dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(cricket-test) $ cd pyramid/
(cricket-test) $ pip install -e .
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install dependencies to run tests&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(cricket-test) $ pip install -e .[testing]
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install cricket&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(cricket-test) $ pip install cricket
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Run cricket&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(cricket-test) $ cricket-unittest &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following UI should appear. If you want to be able to use code coverage tool -- Duvet -- &lt;a class="reference external" href="https://pypi.python.org/pypi/duvet"&gt;https://pypi.python.org/pypi/duvet&lt;/a&gt;, install it with pip using the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(cricket-test) $ pip install duvet
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cricket: running all test by pressing &lt;strong&gt;Run All&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Cricket - run all tests" class="align-center" src="images/0001_cricket_ran.png" style="width: 600px; height: 484px;" /&gt;
&lt;p&gt;Cricket: copying single test, by selecting a test then pressing &lt;strong&gt;Run Selected&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Cricket - ran an individual test" class="align-center" src="images/0002_cricket_individual_test.png" style="width: 600px; height: 484px;" /&gt;
&lt;p&gt;Cricket: running a group of tests, by selecting a top-level filename or class, then pressing &lt;strong&gt;Run Selected&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Cricket -- ran a group of tests" class="align-center" src="images/0003_cricket_ran_test_group.png" style="width: 600px; height: 484px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="missing-dependencies-errors"&gt;
&lt;h2&gt;Missing dependencies errors&lt;/h2&gt;
&lt;p&gt;If any of system packages is missing from the system the following errors will be triggered when trying to run Cricket.&lt;/p&gt;
&lt;div class="section" id="missing-python-tkinter"&gt;
&lt;h3&gt;Missing python-tkinter&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
File &amp;quot;/home/alex/.virtualenvs/cricket-test/bin/cricket-unittest&amp;quot;, line 7, in &amp;lt;module&amp;gt;
from cricket.unittest.__main__ import main
File &amp;quot;/home/alex/.virtualenvs/cricket-test/local/lib/python2.7/site-packages/cricket/unittest/__main__.py&amp;quot;, line 4, in &amp;lt;module&amp;gt;
from cricket.main import main as cricket_main
File &amp;quot;/home/alex/.virtualenvs/cricket-test/local/lib/python2.7/site-packages/cricket/main.py&amp;quot;, line 13, in &amp;lt;module&amp;gt;
from tkinter import *
ImportError: No module named tkinter
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="missing-idle-idle-python"&gt;
&lt;h3&gt;Missing idle / idle-python&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Traceback (most recent call last):
File &amp;quot;/home/alex/.virtualenvs/cricket-test/bin/cricket-unittest&amp;quot;, line 7, in &amp;lt;module&amp;gt;
from cricket.unittest.__main__ import main
File &amp;quot;/home/alex/.virtualenvs/cricket-test/local/lib/python2.7/site-packages/cricket/unittest/__main__.py&amp;quot;, line 4, in &amp;lt;module&amp;gt;
from cricket.main import main as cricket_main
File &amp;quot;/home/alex/.virtualenvs/cricket-test/local/lib/python2.7/site-packages/cricket/main.py&amp;quot;, line 15, in &amp;lt;module&amp;gt;
from cricket.view import (
File &amp;quot;/home/alex/.virtualenvs/cricket-test/local/lib/python2.7/site-packages/cricket/view.py&amp;quot;, line 29, in &amp;lt;module&amp;gt;
from tkreadonly import ReadOnlyText
File &amp;quot;/home/alex/.virtualenvs/cricket-test/local/lib/python2.7/site-packages/tkreadonly.py&amp;quot;, line 15, in &amp;lt;module&amp;gt;
&amp;quot;to work out how to install IDLE and idlelib.&amp;quot;)
Exception: idlelib could not be found. Check your operating system instructions to work out how to install IDLE and idlelib.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Cricket github page -- &lt;a class="reference external" href="https://github.com/pybee/cricket"&gt;https://github.com/pybee/cricket&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Duvet github page -- &lt;a class="reference external" href="https://github.com/pybee/duvet"&gt;https://github.com/pybee/duvet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python.__init__ podcast: An interview with Russel Keith McGee -- &lt;a class="reference external" href="http://podcastinit.podbean.com/e/episode-64-beeware-with-russell-keith-magee/"&gt;http://podcastinit.podbean.com/e/episode-64-beeware-with-russell-keith-magee/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="testing"></category><category term="cricket"></category></entry><entry><title>Running Jenkins in Docker</title><link href="https://avolkov.github.io/running-jenkins-in-docker.html" rel="alternate"></link><published>2016-10-28T10:19:00-04:00</published><updated>2016-10-28T10:19:00-04:00</updated><author><name>Alex Volkov</name></author><id>tag:avolkov.github.io,2016-10-28:/running-jenkins-in-docker.html</id><summary type="html">&lt;p class="first last"&gt;setting up jenkins in docker&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;I went to an FSOSS 2016 &lt;a class="footnote-reference" href="#id7" id="id1"&gt;[1]&lt;/a&gt; conference and I found one talk on Jenkins to be particularly interesting.&lt;/p&gt;
&lt;p&gt;I wanted to try Jenkins, without configuring Java on my laptop or setting up a VM. Using Jenkins docker container would be the easiest solution for this kind of problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;This article assumes Docker &lt;a class="footnote-reference" href="#id8" id="id2"&gt;[2]&lt;/a&gt; and Docker Compose &lt;a class="footnote-reference" href="#id9" id="id3"&gt;[3]&lt;/a&gt; have been set up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jenkins-container"&gt;
&lt;h2&gt;Jenkins container&lt;/h2&gt;
&lt;p&gt;I used an official container built by Jenkins community &lt;a class="footnote-reference" href="#id10" id="id4"&gt;[4]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The container comes with these settings:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Jenkins server runs on ports 5000 and 8000&lt;/li&gt;
&lt;li&gt;Jenkins settings saved to &lt;strong&gt;/var/jenkins_home&lt;/strong&gt; and the directory is exposed as a docker volume&lt;/li&gt;
&lt;li&gt;user / group ids are set to jenkins / jenkins with uid/gid set to 1001/1001.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="volume-setup"&gt;
&lt;h2&gt;Volume Setup&lt;/h2&gt;
&lt;p&gt;Docker volume settings, specify container directory mapping between host and container &lt;a class="footnote-reference" href="#id11" id="id5"&gt;[5]&lt;/a&gt;, allowing files generated  inside of the container to persist. The host system will store the data in &lt;strong&gt;/srv/dockercontainer/jenkins_home&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Following steps to set up docker volume and permission mapping on the host.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create docker volume path on the host&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# mkdir /srv/dockercontainer/jenkins_home
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Set up user/group mapping on the host.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# groupadd --gid 20000 jenkins
# useradd --home-dir /srv/dockercontainer/jenkins_home \
   --uid 20000 --gid 20000 -s /bin/false -M jenkins
# chown -R jenkins:jenkins /srv/dockercontainer/jenkins_home
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="docker-compose-file"&gt;
&lt;h2&gt;Docker compose file&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt; specifies startup settings for Jenkins container.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;jenkins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jenkins&lt;/span&gt;
    &lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;20000:20000&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;5000:5000&amp;quot;&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8080:8080&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/dockercontainer/jenkins_home:/var/jenkins_home&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;image&lt;/strong&gt; -- the directive specifies container to use, in this case it's Jenkins container &lt;a class="footnote-reference" href="#id10" id="id6"&gt;[4]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;user&lt;/strong&gt; -- user/group mapping, 'uid:gid' from the container is mapped 'uid:gid' of the host.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ports&lt;/strong&gt; -- port mapping from the container to the host.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volumes&lt;/strong&gt; -- directory (docker volume) mapping, between the host and the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="starting-up-the-container"&gt;
&lt;h2&gt;Starting up the container&lt;/h2&gt;
&lt;p&gt;Go to the directory containing &lt;strong&gt;docker-compose.yml&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The following command starts the container in foreground, the container needs to be run in the foreground, as during the setup, system activation code for Jenkins will be printed to the console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# docker-compose up
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open a browser and go to &lt;strong&gt;http://localhost:8080&lt;/strong&gt;. Once initial setup is completed, stop the container with &lt;em&gt;Ctrl+C&lt;/em&gt;, then start it as a daemon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# docker-compose up -d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To shut down the container running in daemon mode, execute the following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# docker-compose stop
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="deleting-the-container"&gt;
&lt;h2&gt;Deleting the container&lt;/h2&gt;
&lt;p&gt;To remove container setup, run the following command from the directory where &lt;strong&gt;docker-compose.yml&lt;/strong&gt; is located.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# docker-compose rm jenkins
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The data generated by Jenkins in docker container is saved in &lt;strong&gt;/srv/dockercontainer/jenkins_home&lt;/strong&gt; with user 'jenkins' and group 'jenkins'.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[1]&lt;/td&gt;&lt;td&gt;FSOSS 2016 -- &lt;a class="reference external" href="http://cdot.fsoss.ca/2016/"&gt;http://cdot.fsoss.ca/2016/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[2]&lt;/td&gt;&lt;td&gt;Docker installation on Debian -- &lt;a class="reference external" href="https://docs.docker.com/engine/installation/linux/debian/"&gt;https://docs.docker.com/engine/installation/linux/debian/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[3]&lt;/td&gt;&lt;td&gt;Install Compose -- &lt;a class="reference external" href="https://docs.docker.com/compose/install/"&gt;https://docs.docker.com/compose/install/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[4]&lt;/td&gt;&lt;td&gt;Official Jenkins Docker image -- &lt;a class="reference external" href="https://hub.docker.com/_/jenkins/"&gt;https://hub.docker.com/_/jenkins/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[5]&lt;/td&gt;&lt;td&gt;Manage data in containers -- &lt;a class="reference external" href="https://docs.docker.com/engine/tutorials/dockervolumes/"&gt;https://docs.docker.com/engine/tutorials/dockervolumes/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="jenkins"></category><category term="docker"></category><category term="debian"></category></entry></feed>